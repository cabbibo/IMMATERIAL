#pragma kernel Transfer

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;

float3 _CameraForward;
float3 _CameraRight;
float3 _CameraUp;

float _Radius;

int _NumVerts;
int _NumSmoothedVerts;


float _DeathTime;
float _Time;
int _Locked;

#include "../Chunks/cubicCurve.cginc"
#include "../Chunks/safeID.cginc"

float3 cubicFromValue( in float val , in int particleID, out float3 upPos , out float3 doPos ){

  float3 p0 = float3( 0. , 0. , 0. );
  float3 v0 = float3( 0. , 0. , 0. );
  float3 p1 = float3( 0. , 0. , 0. );
  float3 v1 = float3( 0. , 0. , 0. );

  float3 p2 = float3( 0. , 0. , 0. );

  float vPP = float(_NumVerts);

  float base = val * (vPP-1);

  int baseUp   = floor( base );
  int baseDown = ceil( base );

  if( base == float(baseUp) && baseUp != 0 ){
    baseUp -= 1;
  }

  if( base == float(baseUp) && baseUp == 0 ){
    baseDown += 1;
  }

  /*if( baseUp == baseDown ){
    baseDown += 1;
    base += .1;
  }*/

  float amount = base - float(baseUp);


float3 pos;
  int bladeBase = (_NumVerts) * particleID;

 /* if( baseUp == 0 ){

    p0 = _SkeletonBuffer[ safeID( baseUp       + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p1 = _SkeletonBuffer[ safeID( baseDown     + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p2 = _SkeletonBuffer[ safeID( baseDown + 1 + bladeBase , _SkeletonBuffer_COUNT) ].pos;

    v1 = .5 * ( p2 - p0 );

  }else if( baseDown == _NumVerts-1 ){

    p0 = _SkeletonBuffer[ safeID( baseUp     + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p1 = _SkeletonBuffer[ safeID( baseDown   + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p2 = _SkeletonBuffer[ safeID( baseUp - 1 + bladeBase , _SkeletonBuffer_COUNT) ].pos;

    v0 = .5 * ( p1 - p2 );

  }else{

    p0 = _SkeletonBuffer[ safeID( baseUp   + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p1 = _SkeletonBuffer[ safeID( baseDown + bladeBase , _SkeletonBuffer_COUNT) ].pos;


    float3 pMinus = float3(0,0,0);

    pMinus = _SkeletonBuffer[ safeID( baseUp   - 1 + bladeBase, _SkeletonBuffer_COUNT) ].pos;
    p2 =     _SkeletonBuffer[ safeID( baseDown + 1 + bladeBase, _SkeletonBuffer_COUNT) ].pos;

    v1 = .5 * ( p2 - p0 );
    v0 = .5 * ( p1 - pMinus );

  }

  float3 c0 = p0;
  float3 c1 = p0 + v0/3.;
  float3 c2 = p1 - v1/3.;
  float3 c3 = p1;

  pos = cubicCurve( amount , c0 , c1 , c2 , c3 );

  upPos = cubicCurve( amount  + .01 , c0 , c1 , c2 , c3 );
  doPos = cubicCurve( amount  - .01 , c0 , c1 , c2 , c3 );*/

  float3 pos1 = _SkeletonBuffer[ safeID( baseUp     + bladeBase , _SkeletonBuffer_COUNT) ].pos;
  float3 pos2 = _SkeletonBuffer[ safeID( baseDown   + bladeBase , _SkeletonBuffer_COUNT) ].pos;

  pos = pos1 + ( pos2 - pos1 ) * amount;
  upPos = pos1 + ( pos2 - pos1 ) * (amount+.01);
  doPos = pos1 + ( pos2 - pos1 ) * (amount-.01);

  return pos;

}



#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;
    int sID = safeID( pID , _VertBuffer_COUNT );


  if( pID < _VertBuffer_COUNT ){
  
    int flip = pID % 2;
    pID /= 2;

    int particleID = pID / _NumSmoothedVerts;

    int cornerID = particleID * _NumVerts;
    int cornerID2 = ((particleID+1)%4) * _NumVerts;

    Vert cV = _SkeletonBuffer[safeID(cornerID,_SkeletonBuffer_COUNT)];
    Vert cV2 = _SkeletonBuffer[safeID(cornerID2,_SkeletonBuffer_COUNT)];

    int row = pID % _NumSmoothedVerts;

    float rowVal = float(row) / float(_NumSmoothedVerts-1);

    float3 upPos; float3 doPos;

    float3 pos = cubicFromValue( rowVal , particleID , upPos , doPos );

    float3 d = normalize(100*upPos - 100*pos);
    float3 x = normalize(cross( normalize(d) , _CameraForward) );
    float3 y = normalize(cross( x , d));

  
    float r = _Radius;

    if( _Locked == 0 ){ r *= (1-clamp( pow((_Time - _DeathTime) * .3,2) , 0, 1));}

    //pos = cV.pos - (cV.pos - cV2.pos) * rowVal;

    float3 outVec = x;//float3(10,0,0);
    float3 fPos = pos + outVec * r * (float(flip)-.5);

    float2 fUV = float2( rowVal , float( pID));
    float3 fNor = normalize( outVec );
    float3 fTan = -normalize(cross(fNor,d));

   
    Vert v = _VertBuffer[sID];

   
    v.nor = -fNor;
    //v.uv = fUV;
    //v.tangent = fTan;
    //v.debug = float2(float(particleID),length(v.pos-fPos));
    v.pos = fPos;
    v.nor = normalize(cross(x,d)) * (1+.0001*float3( float(pID)/(float(_NumSmoothedVerts)*4),1,1));//normalize((cV.pos - cV2.pos));

    _VertBuffer[sID] = v;

  }

}