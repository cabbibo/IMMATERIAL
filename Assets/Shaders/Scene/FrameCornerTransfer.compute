#pragma kernel Transfer

struct Vert{
  float3 pos;
  float3 nor;
  float3 tangent;
  float2 uv;
  float debug;
};

struct Particle{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tan;
  float2 uv;
  float2 used;
};



RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _BaseBuffer;
RWStructuredBuffer<Particle> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;
int _BaseBuffer_COUNT;


float _Radius;
int _VertsPerMesh;
float _CountMultiplier;
float _Distance;
float _Fade;
float _DeathTime;
int _Locked;
float _Time;


#include "../Chunks/safeID.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  if( pID < _VertBuffer_COUNT ){
    

    int mID = pID / _VertsPerMesh;
    mID =  int(float(mID) / _CountMultiplier);//_VertsPerSide;
    Vert b = _BaseBuffer[safeID(pID %_VertsPerMesh, _BaseBuffer_COUNT )];
    Particle p = _SkeletonBuffer[safeID( mID, _SkeletonBuffer_COUNT )];

    Vert v = _VertBuffer[safeID(pID,_VertBuffer_COUNT)];


  float r = _Radius * _Distance;

  if( _Locked == 1 ){
    r *= (1-_Fade); 
  }else{
    r  *=  1/(1+(_Time - _DeathTime));
  }



    v.pos      = p.pos + b.pos *  r;// = v;
    v.nor      = b.nor;
    v.tangent  = b.tangent;
    v.uv       = b.uv;

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)] = v;


  }

}