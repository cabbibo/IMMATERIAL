#pragma kernel Set
#pragma kernel Simulate

struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 og;
  float2 uv;
  float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;

int _VertBuffer_COUNT;

int _Size;
int _SmoothSize;
int _Locked;

float3 _BottomLeft;
float3 _BottomRight;
float3 _TopLeft;
float3 _TopRight;

float3 _RO;
float3 _RD;
float _DOWN;

#include "../Chunks/safeID.cginc"

#include "../Chunks/GetRayForce.cginc"



#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Set(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {


  int pID = safeID( threadID + u3GroupID.x * NR_THREADS , _VertBuffer_COUNT );

  int dir = pID / _Size;

  int inDir = pID % _Size;
  float nDir = float(inDir)/float(_Size);

  float3 dirs[4] = { _BottomLeft , _BottomRight, _TopRight, _TopLeft };

  float3 down = dirs[dir];
  float3 up   = dirs[(dir + 1)%4];

  Vert v = _VertBuffer[pID];

  v.og = down + ( up - down) * nDir;
  v.pos = v.og;
  v.uv = float2( nDir ,  float(dir));

  _VertBuffer[pID] = v;

}



#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Simulate(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {


  int pID = safeID( threadID + u3GroupID.x * NR_THREADS , _VertBuffer_COUNT );



  Vert v = _VertBuffer[safeID(pID,_VertBuffer_COUNT)];
  Vert vUp = _VertBuffer[safeID((pID+1)%_VertBuffer_COUNT,_VertBuffer_COUNT)];
  Vert vDo = _VertBuffer[safeID((pID-1)%_VertBuffer_COUNT,_VertBuffer_COUNT)];


float3 force = 0;

if( _Locked == 1 ){ force -= ( v.pos - v.og) * 10; }

force += curlNoise( v.pos )* .01;
force += GetRayForce( v.pos , -8 , 4 );

force -= v.pos - vUp.pos;
force -= v.pos - vDo.pos;


  v.vel += force * .01;

  if( _Locked == 1 ){ v.vel *= .8; }else{ v.vel *= .99; }

  v.pos += v.vel;



  _VertBuffer[safeID(pID,_VertBuffer_COUNT)] = v;



}