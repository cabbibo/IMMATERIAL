#pragma kernel Set
#pragma kernel Collision
#pragma kernel Constraint

#include "../Chunks/noise.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"


float4x4 transform; 

float _Delta;
float _Time;
uint _Pass;
float _SpringDistance;

uint _NumVertsPerHair;
uint _HairsPerPoint;
float _BunchOutForce;
float _HairLength;
float _UpForce;
float _HairVariance;

float3 _HandL;
float3 _HandR;

struct Vert{
  float3 pos;
  float3 oPos;
  float3 nor;
  float3 info;
  float2 uv;
  float  length;
  float debug;
};


struct Base{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tang;
  float2 uv;
  float used;
  float3 triIDs;
  float3 triWeights;
  float3 debug;
};


struct Bone{
  float3 start;
  float3 end;
  float  size;
  float  id;
};


#include "../Chunks/GetRayForce.cginc"

struct Trans{
  float4x4 localToWorld;
  float4x4 worldToLocal;
};

float _NormalForce;
float _NoiseForce;
float _NoiseSpeed;
float _NoiseSize;
float _Dampening;

int _Releasing;

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Base> _BaseBuffer;
//RWStructuredBuffer<Trans> _Pullers;

uint _VertBuffer_COUNT;
uint _BaseBuffer_COUNT;
//uint _Pullers_COUNT;

#include "../Chunks/terrainCompute.cginc"

#include "../Chunks/safeID.cginc"

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
  
}

float3 springForce( float3 p1 , float3 p2 , float sl ){
  float3 dif = p1 - p2;
  float l = length(dif);

  if( l > 0 ){
    float d = l - sl;
    return normalize( dif ) * d;
  }else{
    return float3(0,0,0);
  }

}


#define NR_THREADS 64

[numthreads(NR_THREADS,1,1)]
void Set (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {


  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _NumVertsPerHair;
  if( pID < _VertBuffer_COUNT && bID < _BaseBuffer_COUNT ){


    pID = safeID( pID , _VertBuffer_COUNT );
    Vert vert = _VertBuffer[pID];
    Base base = _BaseBuffer[safeID( bID , _BaseBuffer_COUNT )];

    float3 bP = base.pos;//mul( transform,  float4(base.pos,1)).xyz;
    float3 bN = float3(0,1,0);//normalize(mul( transform,  float4(base.nor,0))).xyz;
    float3 s = float3(1,1,1);//mul( transform , float4(1,1,1,0)).xyz;

    float l = float(pID % _NumVertsPerHair ) / float(_NumVertsPerHair);
    //vert.pos  = bP + bN * l *(length(s)/3)* _HairLength;
    vert.uv = float2( l , float(bID)/float(_BaseBuffer_COUNT));
    //vert.oPos = vert.pos;//base.pos + base.nor * l + _HairLength;
    vert.pos = base.pos - base.nor * l * _HairLength;
    vert.oPos = vert.pos;

    vert.info.x = 1;
      
    vert.length = _HairLength * base.debug.y;//base.uv.y),2);//((sin(float(bID)*10000)+ _HairVariance) / _HairVariance ) * _HairLength;

    _VertBuffer[pID] = vert;

  }
  
}


float3 _PlayerPosition;


[numthreads(NR_THREADS,1,1)]
void Collision (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _NumVertsPerHair;

bool isTip = ((pID % _NumVertsPerHair) == _NumVertsPerHair-1);
  if( pID < _VertBuffer_COUNT && bID < _BaseBuffer_COUNT ){

    pID = safeID( pID , _VertBuffer_COUNT );
    bID = safeID( bID , _BaseBuffer_COUNT );
    Vert vert = _VertBuffer[pID];
    Base base = _BaseBuffer[bID];

   // if( base.used == 1 ){

    float3 bP = base.pos;//mul( transform,  float4(base.pos,1)).xyz;
    float3 bN = base.nor;//normalize(mul( transform,  float4(base.nor,0))).xyz;
    float3 s = float3(1,1,1);//mul( transform , float4(1,1,1,0)).xyz;

    float3 force = -1*bN * 1;//float3( 0 , base.nor , 0.0 );

    float2 xz = 1*normalize( vert.pos.xz - _PlayerPosition.xz ) / (.1 + pow(length(vert.pos.xz - _PlayerPosition.xz), 10));



if( _Releasing == 1 ){
  vert.info.x -= length( xz) * .001;
  vert.info.x -= length(GetRayForce( vert.pos , 3.1 , .4 )) * .01;
}

if( _Releasing == 2 ){
  vert.info.x -= (sin(float(bID))+2) * .003;
  vert.info.x = max( -1, vert.info.x);
}
// Force from ursula
force += float3(xz.x , 0 , xz.y) * .3;


  force += curlNoise( vert.pos * .3 + float3(0,_Time * .3,0) ) * .1;
  force += GetRayForce( vert.pos , 3.1 , .4 );
  force += float3(0,vert.uv.x,0);



// in the air
if( vert.info.x < 0 && bID != 0 ){
   force += curlNoise( vert.pos * .3 + float3(0,_Time * .03,0) ) * 3.1;
   force += float3(1,0,1) * 3;
}


if( bID == 0 ){
  force += float3(0,1,0) * 10;
}

    //force += .2*normalize((_HandL-vert.pos))/pow(length(_HandL-vert.pos),4);
    //force += .2*normalize((_HandR-vert.pos))/pow(length(_HandR-vert.pos),4);
    // Inertia: objects in motion stay in motion.
    float3 vel = getVel( vert.pos , vert.oPos);

    if( length( force ) > 10 ){
      force = normalize(force) * 10;
    }
 



    bool tb = false;


  /*

  Reset Conditions 

  */
    if( length(vert.pos) == 0 ){
      vert.pos  = bP + bN * vert.uv.x * vert.length;
      vert.oPos = vert.pos;
      vert.debug = 1;
      tb = true;
    }

    if( length(vert.pos.x) == 1000 ){
      vert.pos  = bP + bN * vert.uv.x * vert.length;
      vert.oPos = vert.pos;
      vert.debug = 1;
      tb = true;
    }

    //vert.debug = .01;
    //vert.debug = 1.01;
    // If we are at the bottom, 
    if( vert.uv.x == 0 ){ 
      
      vert.nor = bN;

    //  tb = true;
      if( vert.info.x >= 0 || pID == 0  ){
        tb = true;
        vert.pos = bP; 
        vert.oPos = bP;
      }
    }else{

       Vert vDown = _VertBuffer[ safeID( pID - 1 , _VertBuffer_COUNT )];
       vert.nor = normalize(vert.pos - vDown.pos);

    }


    if( _Delta  < .1 && tb == false ){

      float dampening =.95;//_Dampening;//.99999;// - vert.life * .01;
      float3 next = vert.pos + vel  * dampening + force * .001;

      vert.oPos = vert.pos;
      vert.pos = next;

    }


    _VertBuffer[pID] = vert;

  }
  
}







[numthreads(NR_THREADS,1,1)]
void Constraint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  // Get the id using thread / group indices
  uint pID = threadID + u3GroupID.x * NR_THREADS ;

  // Since we are doing 2 passes for verlet, multiply by 2 
  // to get both the vertices!
  pID = pID * 2;
  pID = pID + _Pass;


  float3 s = length(mul( transform , float4(1,1,1,0)).xyz)/3;
  if( pID < uint(_VertBuffer_COUNT) ){

    pID = uint(safeID(pID,_VertBuffer_COUNT));
    int pUp = uint(safeID(pID+1,_VertBuffer_COUNT));
    Vert v1 = _VertBuffer[pID];

    float n = sin(1000*float(pID/_NumVertsPerHair)); 

    // If we are are the end of the hair, no need to do verlet
    if( v1.uv.x < 1-(1/ float(_NumVertsPerHair))){
      Vert v2 = _VertBuffer[pUp];


  v1.info.x  = min( v1.info.x , v2.info.x );
  v2.info.x  = min( v1.info.x , v2.info.x );



      float3 dif = v1.pos - v2.pos;


      float l = length( dif );// * ((4+n)/4);

      float difference = 0;
      
      // We want to make sure that l isn't zero, 
      // or we will get some NaNs
      if( l > 0.001 ){
        difference = (((v1.length)/float(_NumVertsPerHair))-l)/l;//((s*v1.debug.x/float(_NumVertsPerHair)) - l ) / l;
      }

      // Here is where the actual verlet goes down!
      float3 translate = dif * .6 * difference;
      
      float3 t1 = 1 * translate;
      float3 t2 = 1 * translate;
      
      float3 n1 = v1.pos + t1;
      float3 n2 = v2.pos - t2;


  
      if( v1.uv.x == 0 && v1.info.x >= 0 ){
        v1.pos = v1.pos;
        v2.pos = n2 - t2;
      }else{
        // move towards
        v1.pos = n1;
        v2.pos = n2;
      }
        

              // Set both the values in the proper buffer location!
     _VertBuffer[ pID ] = v1;
     _VertBuffer[ pUp ] = v2;



    }



  }



}