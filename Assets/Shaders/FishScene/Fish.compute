#pragma kernel Flow


struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 ogPos;
  float3 axis;
  float life;
};



RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<float4x4> _TransformBuffer;


float4x4 _Transform;


int _VertBuffer_COUNT;
int _TransformBuffer_COUNT;

#include "../Chunks/safeID.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/hash.cginc"
#include "../Chunks/curlNoise.cginc"
float sdBox( float3 p, float3 b )
{
  float3 d = abs(p) - b;
  return length(max(d,0.0))
         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf 
}

float map( float3 pos ){
    
    float minDist = 100000;
    
    for( int i = 0; i < _TransformBuffer_COUNT; i++ ){
      float3 newPos = mul( _TransformBuffer[i] , float4( pos ,1)).xyz;
      float  dist = sdBox( newPos , float3(.6,.6,.6));
      minDist = min( minDist ,dist);
    }

    return minDist;
}

float3 getNor( float3 pos ){
  float3 eps = float3(.001 , 0, 0);

  float3 nor = float3(
      map( pos + eps.xyy ) - map( pos - eps.xyy),
      map( pos + eps.yxy ) - map( pos - eps.yxy),
      map( pos + eps.yyx ) - map( pos - eps.yyx)
    );
  return normalize( nor  * 1000 );
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];

  if( vert.life == 0 ){ vert.life = hash(float(pID)); }

  if( vert.life < 0 ){
    vert.pos = mul( _Transform,float4(0,0,0,1)).xyz;
    float3 v = float3( hash(float(pID * 20)),hash(float(pID * 42)),hash(float(pID * 32)));
    v -= .5;
    vert.axis = normalize( v);
    float3 dir = mul( _Transform , float4(0,1,0,0)).xyz * 4.1;
    vert.vel = (v * 1 + dir) * .01;
    vert.life = 1 + hash(float(pID));
  }else{
    float3 force = 0;

    force += mul( _Transform , float4(0,1,0,0)).xyz * .001;
    force += curlNoise( vert.pos * 3.1 ) * .0006;
    float dist = map( vert.pos );
    float3 nor = getNor( vert.pos ); 
    if( dist < 0 ){ force += nor  * .001; }
    if( dist < .4 ){ force -= cross( nor ,float3(0,1,0)) * .001 / (1 + 1 * dist); }
    
    vert.vel += force;
    vert.pos += vert.vel;


    vert.vel *= .9;//* minDist;
    vert.life -= .003;
  }
  
 // vert.nor = mul(rotation(vert.axis,vert.life*20*(hash(float(pID*123)))+hash(float(pID * 23))),float4(0,0,1,0)).xyz;
  
  _VertBuffer[pID] = vert;

}