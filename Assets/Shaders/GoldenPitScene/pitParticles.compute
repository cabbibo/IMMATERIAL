#pragma kernel Flow


struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tang;
  float3 axis;
  float life;
};


struct Transform {
  float4x4 localToWorld;
  float4x4 worldToLocal;
};




RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Transform> _TransformBuffer;


float3 _EmitterPosition;

int _VertBuffer_COUNT;
int _TransformBuffer_COUNT;
int _SkeletonBuffer_COUNT;

#include "../Chunks/safeID.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/hash.cginc"
#include "../Chunks/curlNoise.cginc"




float3 ring( float id , float r ){

  float3 x = float3(1,0,0);//normalize(_Frame1 - _Frame2);
  float3 y = float3(0,1,0);//normalize(_Frame4 - _Frame2);


  float a = hash(id*100) * 6.28;

  float3 p = r*(-sin( a )*x +cos(a)*y);

  return p; 
}


float3 ringXZ( float id , float r ){
  float3 x = float3(1,0,0);//normalize(_Frame1 - _Frame2);
  float3 y = float3(0,0,1);//normalize(_Frame4 - _Frame2);


  float a = hash(id*100) * 6.28;
  float nR = hash( id * 20 ) * r;

  float3 p = nR*(sin( a )*x -cos(a)*y);

  return p; 

}

float4x4 rotation(float3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return float4x4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}




float3 newAxis( float id ){
  float3 a = float3(hash(id),hash(id*10),hash(id*20));
  return a * 2 - 1;
}




float sdSphere( float3 p, float s )
{
  return length(p)-s;
}


float sdSphere( float3 p, float4 s )
{
  return length(p-s.xyz)-s.w;
}


// from https://www.shadertoy.com/view/4djSDy
// Sphere occlusion
float sphOcclusion( in float3 pos, in float3 nor, in float4 sph )
{
    float3  di = sph.xyz - pos;
    float l  = length(di);
    float nl = dot(nor,di/l);
    float h  = l/sph.w;
    float h2 = h*h;
    float k2 = 1.0 - h2*nl*nl;

    // above/below horizon: Quilez - http://iquilezles.org/www/articles/sphereao/sphereao.htm
    float res = max(0.0,nl)/h2;

    // intersecting horizon: Lagarde/de Rousiers - http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
    if( k2 > 0.0 ) {
      res = pow( clamp(0.5*(nl*h+1.0)/h2,0.0,1.0), 1.5 );
    }

    return res;
}



float4 calcAO( float3 pos, float3 nor )
{

    float occ = 0;
    float minDist = 1000;
    float3 normal;
    for( int i = 0; i < _TransformBuffer_COUNT; i++ ){

        Transform t =  _TransformBuffer[i];

        float3 spherePos = mul(_TransformBuffer[i].localToWorld , float4(0,0,0,1));
        float sphereRad =.49*length(mul(_TransformBuffer[i].localToWorld , float4(1,0,0,0)));

        float ao = sphOcclusion( pos , nor , float4( spherePos , sphereRad ));

        float d =sdSphere( pos , float4( spherePos , sphereRad ));

        if( d < minDist ){
          minDist = d;
          normal = normalize( spherePos - pos );
        }
        //occ = ao * occ;//
        //if( (1-ao) < occ ){ occ += (1-ao); }

        occ += (1-ao);
    }
    occ/=_TransformBuffer_COUNT;

    float3 force = 0;

     force += normal * .1 * minDist;// / minDist;

     if( minDist < 0 ){ force -= normal; }

    return float4( force , occ);    
}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];



  if( vert.life == 0  ){ vert.life = hash(float(pID));}
  

  if( length(vert.axis) == 0 ){ vert.axis = newAxis(float(pID)); }

  if( vert.life < 0  ){
   // float3 pos = float3(vert.uv.x/_MapSize,0, vert.uv.y/_MapSize );
    float p = float(pID);
    
    float3 r = ringXZ(p,1.3);


    vert.pos = _EmitterPosition + float3(0,.11,0) + r; //worldPos(pos);
    vert.life = abs(vert.life)+1;
    vert.life %= 1;
    vert.life += 1;
  
    vert.vel = 0;//axis * .03;

  }else{

    float3 force = float3(0,0,0);
    //force += directionVector( vert.pos );

    force += float3(0,.3,0) * ( 1-vert.life);
    force += curlNoise( vert.pos ) * .1;

    float3 centerForce = _EmitterPosition-vert.pos ;
    force += float3(centerForce.x , 0 , centerForce.z) * vert.life * .04;


    float4 stuff = calcAO( vert.pos, vert.nor);
    force += stuff.xyz  * vert.life;
    vert.tang.x = stuff.w;

    vert.vel += force * .01 * (1+hash(pID*1021.))/2;

   // if( _Emit > .5){
       vert.life -= .001 * (3+sin(float(pID)));
       //vert.vel = 0;
    //}

   vert.pos += vert.vel;

   vert.vel *= .95;

  }
  
  
  vert.nor = mul(rotation(vert.axis,vert.life*10*(hash(float(pID*123))+1)),float4(0,0,1,0)).xyz;
  
  _VertBuffer[pID] = vert;

}


