#pragma kernel Transfer
#pragma kernel FlowerTransfer
#pragma kernel FlowerTransferSquare
#pragma kernel CenterTransfer

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _DandelionBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _DandelionBuffer_COUNT;
int _SkeletonBuffer_COUNT;
#include "../Chunks/safeID.cginc"

int _VertsPerVert;
int _NumVertsPerHair;
float3 _CameraUp;
float3 _CameraRight;
float3 _CameraForward;
float _Radius;


#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int transferID = pID / 7;
    int which = pID % 7;

    int hairID = (transferID / _VertsPerVert);

    if( hairID <3 ){ hairID = 0; }
    int sID = (hairID + 1) * _NumVertsPerHair -1;
    
    Vert p1 = _DandelionBuffer[safeID( transferID , _DandelionBuffer_COUNT )];
    Vert s1 = _SkeletonBuffer[safeID(sID,_SkeletonBuffer_COUNT)];


    float3 fPos; float2 fUV; float3 fNor; float2 fDebug;

    fNor = normalize(p1.pos - s1.pos);///cross( _CameraRight, _CameraUp );//normalize( cross( 100*(p1.pos - s1.pos), 100*(p1.pos - s2.pos)));


    float3 x = normalize(cross(fNor, float3(0,1,0)));//_CameraRight;
    float3 y = normalize(cross(x,fNor));//_CameraUp;


    x = _CameraRight;
    y = _CameraUp;
    float r = _Radius;


    fPos = p1.pos + .001*(float(which) * float3(1,0,0) + float(which%2) * float3(0,1,0)); 
   
    fDebug = float2(1,1);
    fUV = float2(0,0);

    fPos = p1.pos - x * r - y * r;

    float3 dir = p1.pos - s1.pos;

    if( which == 0 ){
      fPos = p1.pos - x * r - y * r;
      fUV = float2( 0, 0); 
      fDebug = float2( float(transferID) , 0 );
    }else if( which  == 1 ){
      fPos = p1.pos + x * r - y * r;
      fDebug = float2( float(transferID) , 0 );
      fUV = float2( 1 , 0 );
    }else if( which == 2 ){
      fPos = p1.pos - x * r + y * r;
      fDebug = float2( float(transferID) , 0 );
      fUV = float2( 0 , 1 );
    }else if( which == 3 ){
      fPos = p1.pos + x * r + y * r;
      fDebug = float2( float(transferID) , 0 );
      fUV = float2( 1 , 1 );
    }else if( which == 4 ){
      fPos = dir * -.1 + p1.pos - x * r * .3 - y * r * .1;
      fDebug = float2( s1.uv.x , 1 );
      fUV = float2( 0 , 1 );
    }else if( which == 5 ){
      fPos = dir * -.1 + p1.pos + x * r * .3 - y * r * .1;
      fDebug = float2( s1.uv.x , 1 );
      fUV = float2( 1 , 1 );
    }else{
      fPos = s1.pos;
      fDebug = float2( s1.uv.x , 1 );
      fUV = float2( .5, 0 );
    }

    pID = safeID(pID,_VertBuffer_COUNT);

    _VertBuffer[pID].pos = fPos;
    _VertBuffer[pID].uv = fUV;
    _VertBuffer[pID].nor = fNor;
    _VertBuffer[pID].debug = fDebug;

}



#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void FlowerTransfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {


    int pID = threadID + u3GroupID.x * NR_THREADS;

    int transferID = pID / 4;
    int which = pID % 4;

    int hairID = (transferID / _VertsPerVert);

    int sID = ((transferID / _VertsPerVert) + 1) * _NumVertsPerHair -1;
    
    Vert s2 = _DandelionBuffer[safeID( transferID , _DandelionBuffer_COUNT )];
    Vert s1 = _SkeletonBuffer[safeID(sID,_SkeletonBuffer_COUNT)];


    float3 fPos; float2 fUV; float3 fNor; float2 fDebug;




    float3 startPos = s1.pos;
    float3 leafDir = s2.pos - s1.pos;//-normalize(cross(s.tangent,s.nor));
    float3 leafTan = normalize(cross(leafDir, float3(0,0,1)));//float3(1,0,0);//normalize(cross( normalize(leafDir) * 1000 , 10000*float3(0,1,0)));
  

    if( which == 0 ){
      fPos = s1.pos;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(.5,0);

      fDebug = float2( float(transferID) , .3 );
    }else if( which == 1 ){
      fPos = s1.pos + leafDir * .3 -  leafTan * _Radius * .3;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(0,.3);

    fDebug = float2( float(transferID) , .3 );
    }else if( which == 2){
      fPos = s1.pos + leafDir * .3  + leafTan * _Radius * .3;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(1,.3);

    fDebug = float2( float(transferID) , .3 );
    }else{
      fPos = s2.pos;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(.5,1);
      fDebug = float2( float(transferID) , 1 );
    };




    pID = safeID(pID,_VertBuffer_COUNT);

    _VertBuffer[pID].pos    = fPos;
    _VertBuffer[pID].uv     = fUV;
    _VertBuffer[pID].nor    = fNor;
    _VertBuffer[pID].debug  = fDebug;

}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void FlowerTransferSquare (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {


    int pID = threadID + u3GroupID.x * NR_THREADS;

    int transferID = pID / 4;
    int which = pID % 4;

    int hairID = (transferID / _VertsPerVert);

    int sID = ((transferID / _VertsPerVert) + 1) * _NumVertsPerHair -1;
    
    Vert s2 = _DandelionBuffer[safeID( transferID , _DandelionBuffer_COUNT )];
    Vert s1 = _SkeletonBuffer[safeID(sID,_SkeletonBuffer_COUNT)];


    float3 fPos; float2 fUV; float3 fNor; float2 fDebug;




    float3 startPos = s1.pos;
    float3 leafDir = s2.pos - s1.pos;//-normalize(cross(s.tangent,s.nor));
    float3 leafTan = normalize(cross(leafDir, s1.nor));//float3(1,0,0);//normalize(cross( normalize(leafDir) * 1000 , 10000*float3(0,1,0)));
  
    //leafTan =normalize( cross( leafTan,leafDir));

    if( which == 0 ){
      fPos = s1.pos -  leafTan * _Radius * .3;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(0,0);

      fDebug = float2( float(transferID) , .3 );
    }else if( which == 1 ){
      fPos = s1.pos +  leafTan * _Radius * .3;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(1,0);

    fDebug = float2( float(transferID) , .3 );
    }else if( which == 2){
      fPos = s2.pos - leafTan * _Radius * .3;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(0,1);

    fDebug = float2( float(transferID) , .3 );
    }else{
      fPos = s2.pos + leafTan * _Radius * .3;
      fNor = leafDir;
      fDebug = float2(1,0);
      fUV = float2(1,1);
      fDebug = float2( float(transferID) , 1 );
    };




    pID = safeID(pID,_VertBuffer_COUNT);

    _VertBuffer[pID].pos    = fPos;
    _VertBuffer[pID].uv     = fUV;
    _VertBuffer[pID].nor    = fNor;
    _VertBuffer[pID].debug  = fDebug;

}



float _UpVal;


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void CenterTransfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {


    int pID = threadID + u3GroupID.x * NR_THREADS;

    int transferID = pID;
    int which = pID % (_VertsPerVert+2);

    int hairID = (transferID / (_VertsPerVert+2));

    int sID = (hairID + 1) * _NumVertsPerHair -1;
    
    Vert s1 = _SkeletonBuffer[safeID(sID,_SkeletonBuffer_COUNT)];
    Vert s2 = _SkeletonBuffer[safeID(sID-1,_SkeletonBuffer_COUNT)];


    float3 fPos; float2 fUV; float3 fNor; float2 fDebug;

    if( which == _VertsPerVert ){
      fPos = -(s2.pos - s1.pos ) * _Radius * _UpVal + s1.pos;
      fNor =  normalize(s2.pos - s1.pos );
      fUV = float2(0,0);
    }else if( which == _VertsPerVert + 1 ){


      fPos = s2.pos;
      fNor =  normalize(s2.pos - s1.pos );

      fUV = float2(0,0);

    }else{

      int fID = hairID * _VertsPerVert + which;
        
      float fW = float(which)/float(_VertsPerVert);

      Vert d = _DandelionBuffer[safeID(fID,_DandelionBuffer_COUNT)];

      fPos = (d.pos - s1.pos ) * _Radius + s1.pos;
      fNor =  normalize(d.pos - s1.pos );

      fUV = float2(fW,1);


    }




    fDebug = float2( float(transferID) , 0 );

    pID = safeID(pID,_VertBuffer_COUNT);

    _VertBuffer[pID].pos    = fPos;
    _VertBuffer[pID].uv     = fUV;
    _VertBuffer[pID].nor    = fNor;
    _VertBuffer[pID].debug  = fDebug;

}
