#pragma kernel Transfer

struct Vert{
  float3 pos;
  float3 nor;
  float3 tangent;
  float2 uv;
  float debug;
};



struct Particle{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tan;
  float2 uv;
  float used;
  float3 triIDs;
  float3 triWeights;
  float3 debug;

  };



RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _BaseBuffer;
RWStructuredBuffer<Particle> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;
int _BaseBuffer_COUNT;


float _Scale;
int _VertsPerMesh;


#include "../Chunks/safeID.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transfer (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  if( pID < _VertBuffer_COUNT ){
    

    Vert b = _BaseBuffer[safeID(pID %_VertsPerMesh , _BaseBuffer_COUNT )];
    Particle p = _SkeletonBuffer[safeID( pID / _VertsPerMesh , _SkeletonBuffer_COUNT )];



    _VertBuffer[pID].pos      = p.pos + b.pos * _Scale;// = v;
    _VertBuffer[pID].nor      = b.nor;
    _VertBuffer[pID].tangent  = b.tangent;
    _VertBuffer[pID].uv       = b.uv;


  }

}