#pragma kernel Simulation


struct Vert{
  float3 pos;
  float3 vel;
  float3 oPos;
  float3 tang;
  float lookupStart;
  float lookupLength;
  float  parent;
  float  level;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<int> _ConnectionBuffer;

int _VertBuffer_COUNT;
int _ConnectionBuffer_COUNT;

float4x4 _Transform;

#include "../Chunks/safeID.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Simulation(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  if( pID < _VertBuffer_COUNT ){
    
    int sID = safeID( pID, _VertBuffer_COUNT );
    Vert v = _VertBuffer[sID];

    float3 force = 0;

    float3 center = mul(_Transform,float4(0,0,0,1));
    force = -normalize(v.pos -center) * 2.01;

    Vert parent = _VertBuffer[int(v.parent)];

    if( v.parent != pID ){
        float3 dif =  (v.pos-parent.pos);
        if( length(dif) != 0 ){
          force -= normalize(dif) * (length(dif)-(.4)) * 1.07;
      } 
    }

    if( sID == 0 ){
      v.pos = center;
    }

    


    for( int i=0; i < v.lookupLength; i++){
      int id = _ConnectionBuffer[v.lookupStart + i ];
      if( id != pID ){
        Vert oV = _VertBuffer[id];
        float3 dif =  -(v.pos - oV.pos);
        if( length(dif) != 0 ){
          force -= normalize(dif)/length(dif) * .4;
        } 
      }
    }

    for( int i = 0; i < _VertBuffer_COUNT; i++ ){
      if( i != pID ){
        Vert oV = _VertBuffer[i];
        float3 dif = v.pos - oV.pos;
        if( length(dif) > 0 ){ 
          force += normalize(dif)/length(dif) * .05;
        }
      }
    }
   
    if( length(force) > 100 ){ force = normalize(force) * 100; }
    if( length(v.vel) > 100 ){ v.vel = normalize(v.vel) * 100; }


    v.vel += force * .01;
    v.pos += v.vel;
    v.vel *= .8;


    _VertBuffer[sID] = v;


  }

}