


#pragma kernel Force
#pragma kernel FlatForce
#pragma kernel Constraint

#include "../Chunks/noise.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"


int _VertsPerVert;

struct Vert{
  float3 pos;
  float3 oPos;
  float3 nor;
  float3 tang;
  float2 uv;
  float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;

uint _VertBuffer_COUNT;
uint _SkeletonBuffer_COUNT;

int _NumVertsPerHair;

float _Length;
float _Delta;

#include "../Chunks/safeID.cginc"

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
  
}

float3 springForce( float3 p1 , float3 p2 , float sl ){
  float3 dif = p1 - p2;
  float l = length(dif);

  if( l > 0 ){
    float d = l - sl;
    return normalize( dif ) * d;
  }else{
    return float3(0,0,0);
  }

}


#define NR_THREADS 64


[numthreads(NR_THREADS,1,1)]
void FlatForce (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _VertsPerVert;
  bID = (bID+1) * _NumVertsPerHair - 1;

  if( pID < _VertBuffer_COUNT && bID < _SkeletonBuffer_COUNT ){

    pID = safeID( pID , _VertBuffer_COUNT );
    bID = safeID( bID , _SkeletonBuffer_COUNT );

    Vert vert = _VertBuffer[pID];
    Vert base = _SkeletonBuffer[bID];
    Vert base1 = _SkeletonBuffer[bID-1];
    //Vert base2 = _SkeletonBuffer[bID-2];

    float3 nor = normalize(base.pos - base1.pos);
    float3 tang = normalize(cross( nor , float3(0,0,1) ));//base1.pos - base2.pos;
    float3 bi = normalize(cross( tang , nor ));


    float angle = ( float( pID % ( _VertsPerVert ) ) ) / float(_VertsPerVert);
    angle *= 6.28;

    float x = sin( angle );
    float y = -cos( angle );

    float3 dir = tang * x + bi * y;//normalize(float3(x,y,z));

    //float3 targetPos = base.pos + .01 * ( x *  cos( v  ) + y * -sin(v));

    float3 force = 1.1 * normalize(dir);//( x *  sin( v  ) + y * -cos(v)); //-(vert.pos - targetPos) * 30;



    // Inertia: objects in motion stay in motion.
    float3 vel = getVel( vert.pos , vert.oPos);

    if( length( force ) > 10 ){
      force = normalize(force) * 10;
    }
 

    bool tb = false;

  
    if( _Delta  < .1 && tb == false ){

      float dampening = .9;// - vert.life * .01;
      float3 next = vert.pos + vel * dampening + force * _Delta * _Delta;

      vert.oPos = vert.pos;
      vert.pos = next;
      vert.uv = float2( base.uv.x , float(pID) );

    }

    _VertBuffer[pID] = vert;


  }
  
}


[numthreads(NR_THREADS,1,1)]
void Force (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _VertsPerVert;
  uint bID2 = pID / _VertsPerVert;

  if( bID < 3){ bID == 0;}
  if( bID2 < 3){ bID2 == 0;}
  bID = (bID+1) * _NumVertsPerHair - 1;
  bID2 *=  _NumVertsPerHair;

  if( pID < _VertBuffer_COUNT && bID < _SkeletonBuffer_COUNT ){

    pID = safeID( pID , _VertBuffer_COUNT );
    bID = safeID( bID , _SkeletonBuffer_COUNT );
    bID2 = safeID( bID2 , _SkeletonBuffer_COUNT );
    

    Vert vert = _VertBuffer[pID];
    Vert base = _SkeletonBuffer[bID];
    Vert base2 = _SkeletonBuffer[bID2];



    float x = hash( float(pID)  * 9 )-.5;
    float y = hash( float(pID)  * 3 )-.5;
    float z = hash( float(pID)  * 5 )-.5;

    float3 dir = normalize(float3(x,y,z));

    //float3 targetPos = base.pos + .01 * ( x *  cos( v  ) + y * -sin(v));

    float3 force = 1.01 * normalize(dir);//( x *  sin( v  ) + y * -cos(v)); //-(vert.pos - targetPos) * 30;

    if( base2.debug.x < 1 ){
      //force *= 200;
    }
 //force *= 20000;

    // Inertia: objects in motion stay in motion.
    float3 vel = getVel( vert.pos , vert.oPos);

    if( length( force ) > 10 ){
      force = normalize(force) * 10;
    }
 

    bool tb = false;

  
    if( _Delta  < .1 && tb == false ){

      float dampening = .9;// - vert.life * .01;
      float3 next = vert.pos + vel * dampening + force * _Delta * _Delta;

      vert.oPos = vert.pos;
      vert.pos = next;
      vert.uv = float2( base.uv.x , float(pID) );

    }

    _VertBuffer[pID] = vert;


  }
  
}



[numthreads(NR_THREADS,1,1)]
void Constraint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  // Get the id using thread / group indices
  uint pID = threadID + u3GroupID.x * NR_THREADS ;


  if( pID < uint(_VertBuffer_COUNT) ){

    pID = uint(safeID(pID,_VertBuffer_COUNT));
    int bID = pID/_VertsPerVert;


      if( bID == 2){ bID = 0; }
      if( bID == 1){ bID = 0; }
      bID = (bID+1) * _NumVertsPerHair - 1;

    int pUp = uint(safeID(bID,_SkeletonBuffer_COUNT));
    Vert v1 = _VertBuffer[pID];
    Vert v2 = _SkeletonBuffer[pUp];



      float n = (sin( float( pID ) * 10 ) + 10) / 10;

      float3 dif = v1.pos - v2.pos;


      float l = length( dif );// * ((4+n)/4);

      float difference = 0;
      
      // We want to make sure that l isn't zero, 
      // or we will get some NaNs
      if( l > 0.001 ){
        difference = ( min(v2.uv.x * 3  , (1-v2.uv.x))*_Length*n - l ) / l;
      }

      // Here is where the actual verlet goes down!
      float3 translate = dif * .6 * difference;
      
      float3 t1 = 1 * translate;
      float3 t2 = 1 * translate;
      
      float3 n1 = v1.pos + t1;
      float3 n2 = v2.pos - t2;
      
      v1.pos = n1+ t1;


              // Set both the values in the proper buffer location!
      _VertBuffer[ pID ] = v1;



    



  }





}